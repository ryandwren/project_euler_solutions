package com.ryandwren.project_euler_solutions.problems

val problemData = listOf(
    ProblemObject(
        title = "Problem 1: Multiples of 3 or 5",
        problemStatement = "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\n" +
                "The sum of these multiples is 23.\n" +
                "\n" +
                "Find the sum of all the multiples of 3 or 5 below 1000.",
        calculate = {
            return@ProblemObject solveP1TotalMultiples(
                firstMultiple = 3,
                secondMultiple = 5,
                limitNumber = 1000
            )
        }
    ),
    ProblemObject(
        title = "Problem 2: Even Fibonacci Numbers",
        problemStatement = "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first terms will be:\n" +
                "1,2,3,5,8,13,21,34,55,89\n" +
                "By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.",
        calculate = {
            return@ProblemObject solveP2EvenFibonacciNumbers()
        }
    ),
    ProblemObject(
        title = "Problem 3: Largest Prime Factor",
        problemStatement = "The prime factors of 13195 are 5, 7, 13 and 29.\n" +
                "What is the largest prime factor of the number 600851475143?\n\n" +
                "Prime factors work for all non-rime numbers (A composite number)\n" +
                "If we enter a prime number into this formula we expect to get that same number back as the output.\n" +
                "A prime factor is a list of prime numbers which multiplied by itself add up to the number you calculated it from.",
        calculate = {  override: Any? ->
            return@ProblemObject solveP3LargestPrimeFactor(override.toString().toULongOrNull() ?: 600851475143UL)
        },
        calculateEulers = { override: Any? ->
            return@ProblemObject solveP3EulersCalcLargestPrimeFactor(override.toString().toULongOrNull() ?: 600851475143UL)
        },
        sanitizeInput = { input ->
            return@ProblemObject input?.take(20)?.filter { it.isDigit() }
        }
    ),
    ProblemObject(
        title = "Problem 4: Largest Palindrome Product",
        problemStatement = "A palindromic number reads the same both ways. The largest palindrome made from the product of\n" +
                "two 2-digit numbers is 9009 = 91 times 99.\n" +
                "Find the largest palindrome made from the product of two 3-digit numbers.",
        calculate = { override: Any? ->
            return@ProblemObject solveP4LargestPalindrome(override.toString().toIntOrNull() ?: 3)

        },
        calculateEulers = { override: Any? ->
            return@ProblemObject solveP4EulersLargestPalindrome(override.toString().toIntOrNull() ?: 3)
        },
        sanitizeInput = { input ->
            //This is number of digits so past 9 digits is too big.
            return@ProblemObject input?.take(1)?.filter { it.isDigit() }
        }
    ),
    ProblemObject(
        title = "Question 5: Smallest Multiple",
        problemStatement = "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n" +
                "What is the smallest positive number that is evenly divisible (divisible with no remainder) by all of the numbers from 1 to 20?",
        calculate = {
            return@ProblemObject solveP5SmallestMultiple(20)
        }
    )
)